name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.1.0"

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          source $HOME/.cargo/env
          uv sync

      - name: Run ruff
        run: |
          source $HOME/.cargo/env
          uv run ruff check opengov_earlyjapanese tests

      - name: Run black
        run: |
          source $HOME/.cargo/env
          uv run black --check opengov_earlyjapanese tests

      - name: Run isort
        run: |
          source $HOME/.cargo/env
          uv run isort --check-only opengov_earlyjapanese tests

      - name: Run mypy
        run: |
          source $HOME/.cargo/env
          uv run mypy opengov_earlyjapanese
        continue-on-error: true

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          source $HOME/.cargo/env
          uv sync

      - name: Run bandit
        run: |
          source $HOME/.cargo/env
          uv run bandit -r opengov_earlyjapanese -c pyproject.toml

      - name: Run safety
        run: |
          source $HOME/.cargo/env
          uv run safety check --json
        continue-on-error: true

  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv (Unix)
        if: runner.os != 'Windows'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install uv (Windows)
        if: runner.os == 'Windows'
        run: irm https://astral.sh/uv/install.ps1 | iex
        shell: pwsh

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-uv-

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          source $HOME/.cargo/env
          uv sync

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: uv sync
        shell: pwsh

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: |
          source $HOME/.cargo/env
          uv run pytest -v --cov=opengov_earlyjapanese --cov-report=xml --cov-report=term

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: uv run pytest -v --cov=opengov_earlyjapanese --cov-report=xml --cov-report=term
        shell: pwsh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
          fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          source $HOME/.cargo/env
          uv sync

      - name: Build package
        run: |
          source $HOME/.cargo/env
          uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: llamasearchai/opengov-earlyjapanese
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
